plugins {
  id 'org.springframework.boot' version '3.1.0'
  id 'io.spring.dependency-management' version '1.1.0'
  id 'java'
}

allprojects {
  apply plugin: 'org.springframework.boot'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'java'

  group = 'io.devfactory'
  version = '0.0.1'
  sourceCompatibility = JavaVersion.VERSION_19
  targetCompatibility = JavaVersion.VERSION_19

  repositories {
    mavenCentral()
  }

  ext {
    set('springCloudVersion', '2022.0.2')
  }

  configurations {
    compileOnly {
      extendsFrom annotationProcessor
    }
  }

  dependencies {
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
  }

  tasks.named('test') {
    useJUnitPlatform()
  }

  tasks.named('compileJava') {
    inputs.files(tasks.named('processResources'))
  }

  bootRun {
    if (project.hasProperty('args')) {
      //noinspection GroovyAssignabilityCheck
      args project.args.split(',') as String[]
    }
    systemProperties = System.properties as Map<String, ?>
  }
}

subprojects {
  dependencies {
    if (project.name.startsWith('service') && project.name != 'service-common') {
      implementation project(':service-common')
    }
    implementation 'org.apache.commons:commons-lang3:3.12.0'
  }

  dependencyManagement {
    imports {
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
  }
}
