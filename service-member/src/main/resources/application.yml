server:
  port: 0

spring:
  application:
    name: service-member

  jpa:
    open-in-view: false
    show-sql: false
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        format_sql: true
        show_sql: true

  devtools:
    restart.enabled: false
    livereload.enabled: true

  h2:
    console:
      enabled: true
      settings:
        web-allow-others: true

  # 2.4 이상 bootstrap.yml를 사용하지 않는 경우
  # config.import가 아닌 bootstrap.yml을 사용하고자 하다면
  # spring-cloud-starter-bootstrap 의존성이 필요함
  config:
    import: configserver:http://localhost:8888/

  cloud:
    config:
      name: service-member # name을 명시하지 않을 경우 application.name을 따라감
      profile: dev

    inetutils:
      ignored-interfaces: # 두개의 네트워크 인터페이스가 있는 경우 무시할 네트워크 인터페이스 지정
        - eth1*

logging:
  level:
    io.devfactory: debug

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans

eureka:
  instance:
    prefer-ip-address: true # 서비스 이름 대신 서비스 IP 주소 등록 (한대의 서버에 하나 이상의 네트워크 인터페이스가 있는 경우 문제가 됨)
    instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true # 유레카 서비스 등록
    fetch-registry: true # 유레카 레지스트리 정보를 가져옴
    service-url:
      defaultZone: http://localhost:8761/eureka

---
spring:
  config:
    activate:
      on-profile: first

  application:
    name: first-service

---
spring:
  config:
    activate:
      on-profile: second

  application:
    name: second-service
